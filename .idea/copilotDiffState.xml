<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/home/HomeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/home/HomeFragment.kt" />
              <option name="originalContent" value="package com.chatait.panictutorgpt.ui.home&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.chatait.panictutorgpt.databinding.FragmentHomeBinding&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        val root = binding.root&#10;&#10;        // 現在時刻の取得と表示&#10;        val currentTime = Calendar.getInstance().time&#10;        val sdf = SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;, Locale.getDefault())&#10;        sdf.timeZone = TimeZone.getTimeZone(&quot;Asia/Tokyo&quot;)&#10;        val formattedTime = sdf.format(currentTime)&#10;        binding.dateTimeText.text = formattedTime&#10;&#10;        // 登録ボタンのクリック処理&#10;        binding.registerButton.setOnClickListener {&#10;            Toast.makeText(context, &quot;登録されました&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        return root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.ui.home&#10;&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.chatait.panictutorgpt.databinding.FragmentHomeBinding&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private val updateTimeRunnable = object : Runnable {&#10;        override fun run() {&#10;            updateDateTime()&#10;            handler.postDelayed(this, 1000)&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        val root = binding.root&#10;&#10;        // 初回表示&#10;        updateDateTime()&#10;        // 1秒ごとに更新&#10;        handler.post(updateTimeRunnable)&#10;&#10;        // 登録ボタンのクリック処理&#10;        binding.registerButton.setOnClickListener {&#10;            Toast.makeText(context, &quot;登録されました&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        return root&#10;    }&#10;&#10;    private fun updateDateTime() {&#10;        val currentTime = Calendar.getInstance().time&#10;        val sdf = SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;, Locale.getDefault())&#10;        sdf.timeZone = TimeZone.getTimeZone(&quot;Asia/Tokyo&quot;)&#10;        val formattedTime = sdf.format(currentTime)&#10;        binding.dateTimeText.text = formattedTime&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        handler.removeCallbacks(updateTimeRunnable)&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>