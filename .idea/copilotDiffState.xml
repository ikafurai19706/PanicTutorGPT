<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.chatait.panictutorgpt&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.chatait.panictutorgpt&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.androidx.lifecycle.livedata.ktx)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.chatait.panictutorgpt&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.chatait.panictutorgpt&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.androidx.lifecycle.livedata.ktx)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.PanicTutorGPT&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.PanicTutorGPT&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/MainActivity.kt" />
              <option name="originalContent" value="package com.chatait.panictutorgpt&#10;&#10;import android.os.Bundle&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import androidx.navigation.ui.setupWithNavController&#10;import com.chatait.panictutorgpt.databinding.ActivityMainBinding&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        val navView: BottomNavigationView = binding.navView&#10;&#10;        val navController = findNavController(R.id.nav_host_fragment_activity_main)&#10;        // Passing each menu ID as a set of Ids because each&#10;        // menu should be considered as top level destinations.&#10;        val appBarConfiguration = AppBarConfiguration(&#10;            setOf(&#10;                R.id.navigation_home, R.id.navigation_dashboard, R.id.navigation_notifications&#10;            )&#10;        )&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;        navView.setupWithNavController(navController)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt&#10;&#10;import android.app.*&#10;import android.content.*&#10;import android.content.pm.PackageManager&#10;import android.os.*&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.app.*&#10;import androidx.core.content.ContextCompat&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.ui.*&#10;import com.chatait.panictutorgpt.databinding.ActivityMainBinding&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import java.util.Random&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private val CHANNEL_ID = &quot;default_channel&quot;&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        val navView: BottomNavigationView = binding.navView&#10;        val navController = findNavController(R.id.nav_host_fragment_activity_main)&#10;        val appBarConfiguration = AppBarConfiguration(&#10;            setOf(R.id.navigation_home, R.id.navigation_dashboard, R.id.navigation_notifications)&#10;        )&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;        navView.setupWithNavController(navController)&#10;&#10;        createNotificationChannel()&#10;        requestNotificationPermission()&#10;    }&#10;&#10;    private fun createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val name = &quot;PanicTutor通知&quot;&#10;            val descriptionText = &quot;テスト予定の通知チャンネル&quot;&#10;            val importance = NotificationManager.IMPORTANCE_DEFAULT&#10;            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {&#10;                description = descriptionText&#10;            }&#10;            val notificationManager: NotificationManager =&#10;                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;    }&#10;&#10;    private fun requestNotificationPermission() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS)&#10;                != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                ActivityCompat.requestPermissions(&#10;                    this,&#10;                    arrayOf(android.Manifest.permission.POST_NOTIFICATIONS),&#10;                    NOTIFICATION_PERMISSION_REQUEST_CODE&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun showNotification() {&#10;        // Android 13以降で通知パーミッションが付与されているか確認&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS)&#10;                != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                return&#10;            }&#10;        }&#10;&#10;        val title = &quot;⚠️ テスト予定リマインダー&quot;&#10;        val text = getRandomScaryMessage()&#10;&#10;        val intent = Intent(this, MainActivity::class.java).apply {&#10;            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;        }&#10;        val pendingIntentRequestCode = System.currentTimeMillis().toInt()&#10;        val pendingIntent: PendingIntent = PendingIntent.getActivity(&#10;            this,&#10;            pendingIntentRequestCode,&#10;            intent,&#10;            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT&#10;        )&#10;&#10;        val builder = NotificationCompat.Builder(this, CHANNEL_ID)&#10;            .setSmallIcon(R.drawable.ic_launcher_foreground)&#10;            .setContentTitle(title)&#10;            .setContentText(text)&#10;            .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;            .setContentIntent(pendingIntent)&#10;            .setAutoCancel(true)&#10;&#10;        with(NotificationManagerCompat.from(this)) {&#10;            val notificationId = System.currentTimeMillis().toInt()&#10;            notify(notificationId, builder.build())&#10;        }&#10;&#10;        saveNotificationToHistory(title, text)&#10;    }&#10;&#10;    private fun getRandomScaryMessage(): String {&#10;        val messages = listOf(&#10;            &quot;締め切りが迫っています！今すぐ勉強を始めましょう！&quot;,&#10;            &quot;見て見ぬふりはできません...テスト準備は大丈夫ですか？&quot;,&#10;            &quot;あなたの勉強状況が気になります。頑張って！&quot;,&#10;            &quot;時間は刻一刻と過ぎています。準備はお済みですか？&quot;,&#10;            &quot;本当にそれでいいのですか？今から始めれば間に合います！&quot;,&#10;            &quot;テスト当日まであとわずか...準備を忘れずに！&quot;,&#10;            &quot;勉強しないと...後悔することになりますよ？&quot;&#10;        )&#10;        return messages[Random().nextInt(messages.size)]&#10;    }&#10;&#10;    private fun saveNotificationToHistory(title: String, message: String) {&#10;        val prefs = getSharedPreferences(&quot;notification_history&quot;, MODE_PRIVATE)&#10;        val history = prefs.getStringSet(&quot;history&quot;, null)?.toMutableSet() ?: mutableSetOf()&#10;        val timestamp = java.text.SimpleDateFormat(&quot;MM/dd HH:mm&quot;, java.util.Locale.getDefault()).format(java.util.Date())&#10;        history.add(&quot;[$timestamp] $title|$message&quot;)&#10;&#10;        prefs.edit()&#10;            .putStringSet(&quot;history&quot;, history)&#10;            .apply()&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(&#10;        requestCode: Int,&#10;        permissions: Array&lt;out String&gt;,&#10;        grantResults: IntArray&#10;    ) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        when (requestCode) {&#10;            NOTIFICATION_PERMISSION_REQUEST_CODE -&gt; {&#10;                if (grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                    // パーミッションが付与された&#10;                } else {&#10;                    // パーミッションが拒否された&#10;                }&#10;                return&#10;            }&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val NOTIFICATION_PERMISSION_REQUEST_CODE = 1001&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/data/ScheduleRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/data/ScheduleRepository.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.data&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;import com.chatait.panictutorgpt.ui.dashboard.ScheduleItem&#10;&#10;class ScheduleRepository(context: Context) {&#10;&#10;    private val prefs: SharedPreferences = context.getSharedPreferences(&quot;schedule_prefs&quot;, Context.MODE_PRIVATE)&#10;&#10;    companion object {&#10;        private const val KEY_SCHEDULE_PREFIX = &quot;schedule_&quot;&#10;        private const val KEY_SCHEDULE_DATES = &quot;schedule_dates&quot;&#10;    }&#10;&#10;    fun saveSchedules(schedules: List&lt;ScheduleItem&gt;) {&#10;        prefs.edit {&#10;            // すべての既存のスケジュールをクリア&#10;            val existingDates = getScheduleDates()&#10;            existingDates.forEach { date -&gt;&#10;                for (i in 0..5) { // 0限〜5限（6時限分）&#10;                    remove(&quot;${KEY_SCHEDULE_PREFIX}${date}_subject_$i&quot;)&#10;                }&#10;            }&#10;            &#10;            // 新しいスケジュールを保存&#10;            val dates = schedules.map { it.date }.toSet()&#10;            putStringSet(KEY_SCHEDULE_DATES, dates)&#10;            &#10;            schedules.forEach { schedule -&gt;&#10;                schedule.subjects.forEachIndexed { index, subject -&gt;&#10;                    putString(&quot;${KEY_SCHEDULE_PREFIX}${schedule.date}_subject_$index&quot;, subject)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadSchedules(): MutableList&lt;ScheduleItem&gt; {&#10;        val schedules = mutableListOf&lt;ScheduleItem&gt;()&#10;        val dates = getScheduleDates()&#10;        &#10;        dates.forEach { date -&gt;&#10;            val subjects = mutableListOf&lt;String&gt;()&#10;            for (i in 0..5) { // 0限〜5限（6時限分）&#10;                val subject = prefs.getString(&quot;${KEY_SCHEDULE_PREFIX}${date}_subject_$i&quot;, &quot;&quot;) ?: &quot;&quot;&#10;                subjects.add(subject)&#10;            }&#10;            &#10;            // 空でない科目が1つでもあればスケジュールに追加&#10;            if (subjects.any { it.isNotEmpty() }) {&#10;                schedules.add(ScheduleItem(date, subjects))&#10;            }&#10;        }&#10;        &#10;        return schedules.sortedBy { it.date }.toMutableList()&#10;    }&#10;&#10;    fun deleteSchedule(date: String) {&#10;        prefs.edit {&#10;            for (i in 0..5) { // 0限〜5限（6時限分）&#10;                remove(&quot;${KEY_SCHEDULE_PREFIX}${date}_subject_$i&quot;)&#10;            }&#10;            &#10;            val dates = getScheduleDates().toMutableSet()&#10;            dates.remove(date)&#10;            putStringSet(KEY_SCHEDULE_DATES, dates)&#10;        }&#10;    }&#10;&#10;    fun addOrUpdateSchedule(scheduleItem: ScheduleItem) {&#10;        prefs.edit {&#10;            scheduleItem.subjects.forEachIndexed { index, subject -&gt;&#10;                putString(&quot;${KEY_SCHEDULE_PREFIX}${scheduleItem.date}_subject_$index&quot;, subject)&#10;            }&#10;            &#10;            val dates = getScheduleDates().toMutableSet()&#10;            dates.add(scheduleItem.date)&#10;            putStringSet(KEY_SCHEDULE_DATES, dates)&#10;        }&#10;    }&#10;    &#10;    private fun getScheduleDates(): Set&lt;String&gt; {&#10;        return prefs.getStringSet(KEY_SCHEDULE_DATES, emptySet()) ?: emptySet()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/dashboard/ScheduleItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/dashboard/ScheduleItem.kt" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.ui.dashboard&#10;&#10;data class ScheduleItem(&#10;    val date: String, // 例: &quot;2025/08/03&quot;&#10;    val subjects: List&lt;String&gt; // 1限～6限の科目名&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/home/HomeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/home/HomeFragment.kt" />
              <option name="originalContent" value="package com.chatait.panictutorgpt.ui.home&#10;&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.chatait.panictutorgpt.databinding.FragmentHomeBinding&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private val updateTimeRunnable = object : Runnable {&#10;        override fun run() {&#10;            updateDateTime()&#10;            handler.postDelayed(this, 1000)&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        val root = binding.root&#10;&#10;        // 初回表示&#10;        updateDateTime()&#10;        // 1秒ごとに更新&#10;        handler.post(updateTimeRunnable)&#10;&#10;        // 登録ボタンのクリック処理&#10;        binding.registerButton.setOnClickListener {&#10;            Toast.makeText(context, &quot;登録されました&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        return root&#10;    }&#10;&#10;    private fun updateDateTime() {&#10;        val currentTime = Calendar.getInstance().time&#10;        val sdf = SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;, Locale.getDefault())&#10;        sdf.timeZone = TimeZone.getTimeZone(&quot;Asia/Tokyo&quot;)&#10;        val formattedTime = sdf.format(currentTime)&#10;        binding.dateTimeText.text = formattedTime&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        handler.removeCallbacks(updateTimeRunnable)&#10;        _binding = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.ui.home&#10;&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.chatait.panictutorgpt.MainActivity&#10;import com.chatait.panictutorgpt.databinding.FragmentHomeBinding&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private val updateTimeRunnable = object : Runnable {&#10;        override fun run() {&#10;            updateDateTime()&#10;            handler.postDelayed(this, 1000)&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        val root = binding.root&#10;&#10;        // 初回表示&#10;        updateDateTime()&#10;        // 1秒ごとに更新&#10;        handler.post(updateTimeRunnable)&#10;&#10;        // 登録ボタンのクリック処理 - 通知送信機能を追加&#10;        binding.registerButton.setOnClickListener {&#10;            // MainActivityの通知機能を呼び出し&#10;            (activity as? MainActivity)?.showNotification()&#10;            Toast.makeText(context, &quot;リマインダー通知を送信しました！&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        return root&#10;    }&#10;&#10;    private fun updateDateTime() {&#10;        val currentTime = Calendar.getInstance().time&#10;        val sdf = SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;, Locale.getDefault())&#10;        sdf.timeZone = TimeZone.getTimeZone(&quot;Asia/Tokyo&quot;)&#10;        val formattedTime = sdf.format(currentTime)&#10;        binding.dateTimeText.text = formattedTime&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        handler.removeCallbacks(updateTimeRunnable)&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/notifications/NotificationsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/notifications/NotificationsFragment.kt" />
              <option name="originalContent" value="package com.chatait.panictutorgpt.ui.notifications&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.chatait.panictutorgpt.databinding.FragmentNotificationsBinding&#10;&#10;class NotificationsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentNotificationsBinding? = null&#10;&#10;    // This property is only valid between onCreateView and&#10;    // onDestroyView.&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        val notificationsViewModel =&#10;            ViewModelProvider(this).get(NotificationsViewModel::class.java)&#10;&#10;        _binding = FragmentNotificationsBinding.inflate(inflater, container, false)&#10;        val root: View = binding.root&#10;&#10;        val textView: TextView = binding.textNotifications&#10;        notificationsViewModel.text.observe(viewLifecycleOwner) {&#10;            textView.text = it&#10;        }&#10;        return root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.ui.notifications&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ArrayAdapter&#10;import android.widget.ListView&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.chatait.panictutorgpt.databinding.FragmentNotificationsBinding&#10;&#10;class NotificationsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentNotificationsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var listView: ListView&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        val notificationsViewModel =&#10;            ViewModelProvider(this).get(NotificationsViewModel::class.java)&#10;&#10;        _binding = FragmentNotificationsBinding.inflate(inflater, container, false)&#10;        val root: View = binding.root&#10;&#10;        val textView: TextView = binding.textNotifications&#10;        notificationsViewModel.text.observe(viewLifecycleOwner) {&#10;            textView.text = it&#10;        }&#10;&#10;        // ListView を初期化し、通知履歴を表示&#10;        listView = binding.notificationList&#10;        loadNotificationHistory()&#10;&#10;        return root&#10;    }&#10;&#10;    private fun loadNotificationHistory() {&#10;        val prefs = requireContext().getSharedPreferences(&quot;notification_history&quot;, Context.MODE_PRIVATE)&#10;        val historySet = prefs.getStringSet(&quot;history&quot;, emptySet())&#10;&#10;        val historyList = if (historySet.isNullOrEmpty()) {&#10;            listOf(&quot;通知履歴はまだありません。\nHomeタブの「Entry」ボタンで通知を送信してください。&quot;)&#10;        } else {&#10;            historySet.map { historyItem -&gt;&#10;                val parts = historyItem.split(&quot;|&quot;)&#10;                val titleWithTime = parts.getOrNull(0) ?: &quot;タイトルなし&quot;&#10;                val message = parts.getOrNull(1) ?: &quot;メッセージなし&quot;&#10;                &quot;$titleWithTime\n$message&quot;&#10;            }.sortedDescending() // 新しい順に表示&#10;        }&#10;&#10;        val adapter = ArrayAdapter(requireContext(), android.R.layout.simple_list_item_1, historyList)&#10;        listView.adapter = adapter&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // フラグメントが表示されるたびに履歴を更新&#10;        loadNotificationHistory()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_schedule.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_schedule.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginBottom=&quot;3dp&quot;&#10;        android:layout_marginTop=&quot;18dp&quot;&#10;        android:hint=&quot;1限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject1&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;2限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;3限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject3&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;4限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject4&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;5限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject5&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;6限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject6&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginBottom=&quot;3dp&quot;&#10;        android:layout_marginTop=&quot;18dp&quot;&#10;        android:hint=&quot;1限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject1&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;2限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;3限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject3&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;4限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject4&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;5限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject5&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;6限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject6&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textError&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;科目名が入力されていません&quot;&#10;        android:textColor=&quot;#D32F2F&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_custom_date_picker.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_custom_date_picker.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingTop=&quot;12dp&quot;&#10;    android:paddingLeft=&quot;12dp&quot;&#10;    android:paddingRight=&quot;12dp&quot;&gt;&#10;&#10;    &lt;DatePicker&#10;        android:id=&quot;@+id/customDatePicker&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:calendarViewShown=&quot;true&quot;&#10;        android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingTop=&quot;12dp&quot;&#10;    android:paddingLeft=&quot;12dp&quot;&#10;    android:paddingRight=&quot;12dp&quot;&gt;&#10;&#10;    &lt;DatePicker&#10;        android:id=&quot;@+id/customDatePicker&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:calendarViewShown=&quot;true&quot;&#10;        android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_dashboard.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_dashboard.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.dashboard.DashboardFragment&quot;&gt;&#10;&#10;    &lt;CalendarView&#10;        android:id=&quot;@+id/calendarView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_marginStart=&quot;24dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/scheduleList&quot;&#10;        android:layout_marginEnd=&quot;24dp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:focusedMonthDateColor=&quot;@color/purple_500&quot;&#10;        android:selectedWeekBackgroundColor=&quot;@color/purple_200&quot;&#10;        android:weekNumberColor=&quot;@color/purple_500&quot;&#10;        android:unfocusedMonthDateColor=&quot;@color/black&quot;&#10;        android:weekSeparatorLineColor=&quot;@color/purple_500&quot; /&gt;&#10;        android:padding=&quot;16dp&quot;&#10;        android:text=&quot;テストの予定を追加&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;1.0&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/calendarView&quot;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.dashboard.DashboardFragment&quot;&gt;&#10;&#10;    &lt;CalendarView&#10;        android:id=&quot;@+id/calendarView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/scheduleList&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/scheduleList&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/calendarView&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/dashboardEntryButton&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;!-- HomeのEntryボタンと同じものを下部に追加（horizontal margin 24dp） --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/dashboardEntryButton&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;24dp&quot;&#10;        android:layout_marginEnd=&quot;24dp&quot;&#10;        android:layout_marginBottom=&quot;100dp&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:text=&quot;テストの予定を追加&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;1.0&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:gravity=&quot;center_horizontal&quot;&gt;&#10;&#10;    &lt;!-- 日付時刻を表示するTextView --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/dateTimeText&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;2025/08/02 14:30&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;/&gt;&#10;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:gravity=&quot;center_horizontal&quot;&gt;&#10;&#10;    &lt;!-- 日付時刻を表示するTextView --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/dateTimeText&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;2025/08/02 14:30&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;/&gt;&#10;&#10;    &lt;!-- アナログ時計を追加 --&gt;&#10;    &lt;AnalogClock&#10;        android:id=&quot;@+id/analogClock&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;/&gt;&#10;&#10;    &lt;!-- 通知送信ボタン --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/registerButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot; リマインダー通知を送信&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_notifications.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_notifications.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.notifications.NotificationsFragment&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/text_notifications&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&#10;        android:textAlignment=&quot;center&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.notifications.NotificationsFragment&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/text_notifications&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&#10;        android:textAlignment=&quot;center&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:text=&quot;通知履歴&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;ListView&#10;        android:id=&quot;@+id/notification_list&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        android:divider=&quot;#CCCCCC&quot;&#10;        android:dividerHeight=&quot;1dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/text_notifications&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>