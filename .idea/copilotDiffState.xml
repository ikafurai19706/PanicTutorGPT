<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.chatait.panictutorgpt&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.chatait.panictutorgpt&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.androidx.lifecycle.livedata.ktx)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.chatait.panictutorgpt&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.chatait.panictutorgpt&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.androidx.lifecycle.livedata.ktx)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/data/ScheduleRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/data/ScheduleRepository.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.data&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;import com.chatait.panictutorgpt.ui.dashboard.ScheduleItem&#10;&#10;class ScheduleRepository(context: Context) {&#10;&#10;    private val prefs: SharedPreferences = context.getSharedPreferences(&quot;schedule_prefs&quot;, Context.MODE_PRIVATE)&#10;&#10;    companion object {&#10;        private const val KEY_SCHEDULE_PREFIX = &quot;schedule_&quot;&#10;        private const val KEY_SCHEDULE_DATES = &quot;schedule_dates&quot;&#10;    }&#10;&#10;    fun saveSchedules(schedules: List&lt;ScheduleItem&gt;) {&#10;        prefs.edit {&#10;            // すべての既存のスケジュールをクリア&#10;            val existingDates = getScheduleDates()&#10;            existingDates.forEach { date -&gt;&#10;                for (i in 0..5) { // 0限〜5限（6時限分）&#10;                    remove(&quot;${KEY_SCHEDULE_PREFIX}${date}_subject_$i&quot;)&#10;                }&#10;            }&#10;            &#10;            // 新しいスケジュールを保存&#10;            val dates = schedules.map { it.date }.toSet()&#10;            putStringSet(KEY_SCHEDULE_DATES, dates)&#10;            &#10;            schedules.forEach { schedule -&gt;&#10;                schedule.subjects.forEachIndexed { index, subject -&gt;&#10;                    putString(&quot;${KEY_SCHEDULE_PREFIX}${schedule.date}_subject_$index&quot;, subject)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadSchedules(): MutableList&lt;ScheduleItem&gt; {&#10;        val schedules = mutableListOf&lt;ScheduleItem&gt;()&#10;        val dates = getScheduleDates()&#10;        &#10;        dates.forEach { date -&gt;&#10;            val subjects = mutableListOf&lt;String&gt;()&#10;            for (i in 0..5) { // 0限〜5限（6時限分）&#10;                val subject = prefs.getString(&quot;${KEY_SCHEDULE_PREFIX}${date}_subject_$i&quot;, &quot;&quot;) ?: &quot;&quot;&#10;                subjects.add(subject)&#10;            }&#10;            &#10;            // 空でない科目が1つでもあればスケジュールに追加&#10;            if (subjects.any { it.isNotEmpty() }) {&#10;                schedules.add(ScheduleItem(date, subjects))&#10;            }&#10;        }&#10;        &#10;        return schedules.sortedBy { it.date }.toMutableList()&#10;    }&#10;&#10;    fun deleteSchedule(date: String) {&#10;        prefs.edit {&#10;            for (i in 0..5) { // 0限〜5限（6時限分）&#10;                remove(&quot;${KEY_SCHEDULE_PREFIX}${date}_subject_$i&quot;)&#10;            }&#10;            &#10;            val dates = getScheduleDates().toMutableSet()&#10;            dates.remove(date)&#10;            putStringSet(KEY_SCHEDULE_DATES, dates)&#10;        }&#10;    }&#10;&#10;    fun addOrUpdateSchedule(scheduleItem: ScheduleItem) {&#10;        prefs.edit {&#10;            scheduleItem.subjects.forEachIndexed { index, subject -&gt;&#10;                putString(&quot;${KEY_SCHEDULE_PREFIX}${scheduleItem.date}_subject_$index&quot;, subject)&#10;            }&#10;            &#10;            val dates = getScheduleDates().toMutableSet()&#10;            dates.add(scheduleItem.date)&#10;            putStringSet(KEY_SCHEDULE_DATES, dates)&#10;        }&#10;    }&#10;    &#10;    private fun getScheduleDates(): Set&lt;String&gt; {&#10;        return prefs.getStringSet(KEY_SCHEDULE_DATES, emptySet()) ?: emptySet()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/dashboard/DashboardFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/dashboard/DashboardFragment.kt" />
              <option name="originalContent" value="package com.chatait.panictutorgpt.ui.dashboard&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.DatePicker&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.chatait.panictutorgpt.R&#10;import com.chatait.panictutorgpt.databinding.FragmentDashboardBinding&#10;&#10;    private var _binding: FragmentDashboardBinding? = null&#10;&#10;    // This property is only valid between onCreateView and&#10;    // onDestroyView.&#10;    private val binding get() = _binding!!&#10;&#10;    private val scheduleList = mutableListOf&lt;ScheduleItem&gt;()&#10;    private lateinit var adapter: ScheduleAdapter&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val dashboardViewModel =&#10;            ViewModelProvider(this).get(DashboardViewModel::class.java)&#10;&#10;        _binding = FragmentDashboardBinding.inflate(inflater, container, false)&#10;        val root: View = binding.root&#10;&#10;        // RecyclerView初期化&#10;        val recyclerView = root.findViewById&lt;RecyclerView&gt;(R.id.scheduleList)&#10;        adapter = ScheduleAdapter(scheduleList)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        recyclerView.adapter = adapter&#10;&#10;        // 予定追加ボタンのクリックリスナー&#10;        binding.dashboardEntryButton.setOnClickListener {&#10;            val calendar = Calendar.getInstance()&#10;            val inflater = LayoutInflater.from(requireContext())&#10;            val datePickerView = inflater.inflate(R.layout.dialog_custom_date_picker, null)&#10;            val calendar = Calendar.getInstance()&#10;            val inflater = LayoutInflater.from(requireContext())&#10;            val datePickerView = inflater.inflate(R.layout.dialog_custom_date_picker, null)&#10;            val datePicker = datePickerView.findViewById&lt;DatePicker&gt;(R.id.customDatePicker)&#10;            datePicker.init(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH), null)&#10;            // 過去日付を選択不可に&#10;            datePicker.minDate = calendar.timeInMillis&#10;&#10;            val dateDialog = AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;テストの日付を選択…&quot;)&#10;                .setView(datePickerView)&#10;                .setPositiveButton(&quot;次へ&quot;) { _, _ -&gt;&#10;                    val year = datePicker.year&#10;                    val month = datePicker.month&#10;                    val day = datePicker.dayOfMonth&#10;                    showAddScheduleForm(year, month, day)&#10;                }&#10;                .setNegativeButton(&quot;キャンセル&quot;, null)&#10;                .create()&#10;            dateDialog.show()&#10;            dateDialog.show()&#10;        }&#10;&#10;        dashboardViewModel.text.observe(viewLifecycleOwner) {&#10;&#10;        }&#10;        return root&#10;    }&#10;&#10;    // 日付と教科名を入力する関数（引数で日付を受け取る）&#10;    private fun showAddScheduleForm(year: Int, month: Int, day: Int) {&#10;        val context = requireContext()&#10;        val inflater = LayoutInflater.from(context)&#10;        val dialogView = inflater.inflate(R.layout.dialog_add_schedule, null)&#10;        val subject1 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject1)&#10;        val subject2 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject2)&#10;        val subject3 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject3)&#10;        val subject4 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject4)&#10;        val subject5 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject5)&#10;        val subject6 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject6)&#10;        val errorText = dialogView.findViewById&lt;TextView&gt;(R.id.textError)&#10;&#10;        val dialog = AlertDialog.Builder(context)&#10;            .setTitle(&quot;科目名を入力…&quot;)&#10;            .setView(dialogView)&#10;            .setPositiveButton(&quot;追加&quot;, null) // 後でリスナーを設定&#10;            .setNegativeButton(&quot;キャンセル&quot;, null)&#10;            .create()&#10;        dialog.setOnShowListener {&#10;            val button = dialog.getButton(AlertDialog.BUTTON_POSITIVE)&#10;            button.setOnClickListener {&#10;                val date = &quot;%04d/%02d/%02d&quot;.format(year, month + 1, day)&#10;                val subjects = listOf(&#10;                    subject1.text.toString(),&#10;                    subject2.text.toString(),&#10;                    subject3.text.toString(),&#10;                    subject4.text.toString(),&#10;                    subject5.text.toString(),&#10;                    subject6.text.toString()&#10;                )&#10;                if (subjects.all { it.isBlank() }) {&#10;                    errorText.visibility = View.VISIBLE&#10;                } else {&#10;                    errorText.visibility = View.GONE&#10;                    scheduleList.add(ScheduleItem(date, subjects))&#10;                    scheduleList.sortBy { it.date }&#10;                    adapter.notifyDataSetChanged()&#10;                    dialog.dismiss()&#10;                }&#10;            }&#10;        }&#10;        dialog.show()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.ui.dashboard&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.DatePicker&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.chatait.panictutorgpt.R&#10;import com.chatait.panictutorgpt.databinding.FragmentDashboardBinding&#10;import com.chatait.panictutorgpt.data.ScheduleRepository&#10;import java.util.Calendar&#10;&#10;class DashboardFragment : Fragment() {&#10;&#10;    private var _binding: FragmentDashboardBinding? = null&#10;&#10;    // This property is only valid between onCreateView and&#10;    // onDestroyView.&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var scheduleList: MutableList&lt;ScheduleItem&gt;&#10;    private lateinit var adapter: ScheduleAdapter&#10;    private lateinit var scheduleRepository: ScheduleRepository&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val dashboardViewModel =&#10;            ViewModelProvider(this).get(DashboardViewModel::class.java)&#10;&#10;        _binding = FragmentDashboardBinding.inflate(inflater, container, false)&#10;        val root: View = binding.root&#10;&#10;        // ScheduleRepositoryを初期化&#10;        scheduleRepository = ScheduleRepository(requireContext())&#10;        &#10;        // 保存されたスケジュールを読み込み&#10;        scheduleList = scheduleRepository.loadSchedules()&#10;&#10;        // RecyclerView初期化&#10;        val recyclerView = root.findViewById&lt;RecyclerView&gt;(R.id.scheduleList)&#10;        adapter = ScheduleAdapter(scheduleList) { dateToDelete -&gt;&#10;            // 削除処理&#10;            scheduleRepository.deleteSchedule(dateToDelete)&#10;            scheduleList.clear()&#10;            scheduleList.addAll(scheduleRepository.loadSchedules())&#10;            adapter.notifyDataSetChanged()&#10;        }&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        recyclerView.adapter = adapter&#10;&#10;        // 予定追加ボタンのクリックリスナー&#10;        binding.dashboardEntryButton.setOnClickListener {&#10;            val calendar = Calendar.getInstance()&#10;            val inflater = LayoutInflater.from(requireContext())&#10;            val datePickerView = inflater.inflate(R.layout.dialog_custom_date_picker, null)&#10;            val datePicker = datePickerView.findViewById&lt;DatePicker&gt;(R.id.customDatePicker)&#10;            datePicker.init(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH), null)&#10;            // 過去日付を選択不可に&#10;            datePicker.minDate = calendar.timeInMillis&#10;&#10;            val dateDialog = AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;テストの日付を選択…&quot;)&#10;                .setView(datePickerView)&#10;                .setPositiveButton(&quot;次へ&quot;) { _, _ -&gt;&#10;                    val year = datePicker.year&#10;                    val month = datePicker.month&#10;                    val day = datePicker.dayOfMonth&#10;                    showAddScheduleForm(year, month, day)&#10;                }&#10;                .setNegativeButton(&quot;キャンセル&quot;, null)&#10;                .create()&#10;            dateDialog.show()&#10;        }&#10;&#10;        dashboardViewModel.text.observe(viewLifecycleOwner) {&#10;&#10;        }&#10;        return root&#10;    }&#10;&#10;    // 日付と教科名を入力する関数（引数で日付を受け取る）&#10;    private fun showAddScheduleForm(year: Int, month: Int, day: Int) {&#10;        val context = requireContext()&#10;        val inflater = LayoutInflater.from(context)&#10;        val dialogView = inflater.inflate(R.layout.dialog_add_schedule, null)&#10;        val subject1 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject1)&#10;        val subject2 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject2)&#10;        val subject3 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject3)&#10;        val subject4 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject4)&#10;        val subject5 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject5)&#10;        val subject6 = dialogView.findViewById&lt;EditText&gt;(R.id.editTextSubject6)&#10;        val errorText = dialogView.findViewById&lt;TextView&gt;(R.id.textError)&#10;&#10;        val date = &quot;%04d/%02d/%02d&quot;.format(year, month + 1, day)&#10;        // 既存データがあれば初期値セット&#10;        val existing = scheduleList.find { it.date == date }&#10;        if (existing != null) {&#10;            val fields = listOf(subject1, subject2, subject3, subject4, subject5, subject6)&#10;            existing.subjects.forEachIndexed { i, value -&gt;&#10;                if (i &lt; fields.size) fields[i].setText(value)&#10;            }&#10;        }&#10;&#10;        val dialog = AlertDialog.Builder(context)&#10;            .setTitle(&quot;科目名を入力…&quot;)&#10;            .setView(dialogView)&#10;            .setPositiveButton(&quot;追加&quot;, null) // 後でリスナーを設定&#10;            .setNegativeButton(&quot;キャンセル&quot;, null)&#10;            .create()&#10;        dialog.setOnShowListener {&#10;            val button = dialog.getButton(AlertDialog.BUTTON_POSITIVE)&#10;            val subjectFields = listOf(subject1, subject2, subject3, subject4, subject5, subject6)&#10;            val updateError = {&#10;                val subjects = subjectFields.map { it.text.toString() }&#10;                errorText.visibility = if (subjects.all { it.isBlank() }) View.VISIBLE else View.GONE&#10;            }&#10;            button.setOnClickListener {&#10;                val subjects = subjectFields.map { it.text.toString() }&#10;                if (subjects.all { it.isBlank() }) {&#10;                    errorText.visibility = View.VISIBLE&#10;                } else {&#10;                    errorText.visibility = View.GONE&#10;                    // ScheduleRepositoryを使用してデータを保存&#10;                    val scheduleItem = ScheduleItem(date, subjects)&#10;                    scheduleRepository.addOrUpdateSchedule(scheduleItem)&#10;                    &#10;                    // UIを更新&#10;                    scheduleList.clear()&#10;                    scheduleList.addAll(scheduleRepository.loadSchedules())&#10;                    adapter.notifyDataSetChanged()&#10;                    dialog.dismiss()&#10;                }&#10;            }&#10;            // 入力時にエラー非表示&#10;            subjectFields.forEach { editText -&gt;&#10;                editText.addTextChangedListener(object : android.text.TextWatcher {&#10;                    override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}&#10;                    override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {&#10;                        updateError()&#10;                    }&#10;                    override fun afterTextChanged(s: android.text.Editable?) {}&#10;                })&#10;            }&#10;        }&#10;        dialog.show()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/dashboard/ScheduleAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/dashboard/ScheduleAdapter.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.ui.dashboard&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.chatait.panictutorgpt.R&#10;&#10;class ScheduleAdapter(&#10;    private val items: MutableList&lt;ScheduleItem&gt;,&#10;    private val onDeleteClick: ((String) -&gt; Unit)? = null&#10;) : RecyclerView.Adapter&lt;ScheduleAdapter.ViewHolder&gt;() {&#10;    &#10;    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {&#10;        val dateText: TextView = view.findViewById(R.id.scheduleDate)&#10;        val subjectsText: TextView = view.findViewById(R.id.scheduleSubjects)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_schedule, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val item = items[position]&#10;        holder.dateText.text = item.date&#10;        holder.subjectsText.text = item.subjects.withIndex()&#10;            .filter { it.value.isNotBlank() }&#10;            .joinToString(&quot;\n&quot;) { (i, s) -&gt; &quot;${i+1}限: $s&quot; }&#10;        &#10;        // 長押しで削除確認ダイアログを表示&#10;        holder.itemView.setOnLongClickListener {&#10;            AlertDialog.Builder(holder.itemView.context)&#10;                .setTitle(&quot;予定を削除&quot;)&#10;                .setMessage(&quot;${item.date}の予定を削除しますか？&quot;)&#10;                .setPositiveButton(&quot;削除&quot;) { _, _ -&gt;&#10;                    onDeleteClick?.invoke(item.date)&#10;                }&#10;                .setNegativeButton(&quot;キャンセル&quot;, null)&#10;                .show()&#10;            true&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = items.size&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/dashboard/ScheduleItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/chatait/panictutorgpt/ui/dashboard/ScheduleItem.kt" />
              <option name="updatedContent" value="package com.chatait.panictutorgpt.ui.dashboard&#10;&#10;data class ScheduleItem(&#10;    val date: String, // 例: &quot;2025/08/03&quot;&#10;    val subjects: List&lt;String&gt; // 1限～6限の科目名&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_schedule.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_schedule.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginBottom=&quot;3dp&quot;&#10;        android:layout_marginTop=&quot;18dp&quot;&#10;        android:hint=&quot;1限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject1&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;2限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;3限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject3&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;4限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject4&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;5限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject5&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;6限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject6&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginBottom=&quot;3dp&quot;&#10;        android:layout_marginTop=&quot;18dp&quot;&#10;        android:hint=&quot;1限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject1&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;2限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;3限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject3&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;4限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject4&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;5限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject5&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;24dp&quot;&#10;        android:layout_marginVertical=&quot;3dp&quot;&#10;        android:hint=&quot;6限&quot;&#10;        app:boxBackgroundMode=&quot;outline&quot;&gt;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/editTextSubject6&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textError&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;科目名が入力されていません&quot;&#10;        android:textColor=&quot;#D32F2F&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_custom_date_picker.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_custom_date_picker.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingTop=&quot;12dp&quot;&#10;    android:paddingLeft=&quot;12dp&quot;&#10;    android:paddingRight=&quot;12dp&quot;&gt;&#10;&#10;    &lt;DatePicker&#10;        android:id=&quot;@+id/customDatePicker&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:calendarViewShown=&quot;true&quot;&#10;        android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingTop=&quot;12dp&quot;&#10;    android:paddingLeft=&quot;12dp&quot;&#10;    android:paddingRight=&quot;12dp&quot;&gt;&#10;&#10;    &lt;DatePicker&#10;        android:id=&quot;@+id/customDatePicker&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:calendarViewShown=&quot;true&quot;&#10;        android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_dashboard.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_dashboard.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.dashboard.DashboardFragment&quot;&gt;&#10;&#10;    &lt;CalendarView&#10;        android:id=&quot;@+id/calendarView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_marginStart=&quot;24dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/scheduleList&quot;&#10;        android:layout_marginEnd=&quot;24dp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:focusedMonthDateColor=&quot;@color/purple_500&quot;&#10;        android:selectedWeekBackgroundColor=&quot;@color/purple_200&quot;&#10;        android:weekNumberColor=&quot;@color/purple_500&quot;&#10;        android:unfocusedMonthDateColor=&quot;@color/black&quot;&#10;        android:weekSeparatorLineColor=&quot;@color/purple_500&quot; /&gt;&#10;        android:padding=&quot;16dp&quot;&#10;        android:text=&quot;テストの予定を追加&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;1.0&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/calendarView&quot;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.dashboard.DashboardFragment&quot;&gt;&#10;&#10;    &lt;CalendarView&#10;        android:id=&quot;@+id/calendarView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/scheduleList&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/scheduleList&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/calendarView&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/dashboardEntryButton&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;!-- HomeのEntryボタンと同じものを下部に追加（horizontal margin 24dp） --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/dashboardEntryButton&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;24dp&quot;&#10;        android:layout_marginEnd=&quot;24dp&quot;&#10;        android:layout_marginBottom=&quot;100dp&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:text=&quot;テストの予定を追加&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;1.0&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:gravity=&quot;center_horizontal&quot;&gt;&#10;&#10;    &lt;!-- 日付時刻を表示するTextView --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/dateTimeText&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;2025/08/02 14:30&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;/&gt;&#10;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:orientation=&quot;vertical&quot;&#13;&#10;    android:padding=&quot;24dp&quot;&#13;&#10;    android:gravity=&quot;center_horizontal&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- 日付時刻を表示するTextView --&gt;&#13;&#10;    &lt;TextView&#13;&#10;        android:id=&quot;@+id/dateTimeText&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:text=&quot;2025/08/02 14:30&quot;&#13;&#10;        android:textSize=&quot;24sp&quot;&#13;&#10;        android:textStyle=&quot;bold&quot;&#13;&#10;        android:layout_marginBottom=&quot;32dp&quot;/&gt;&#13;&#10;&#13;&#10;    &lt;!-- アナログ時計を追加 --&gt;&#13;&#10;    &lt;AnalogClock&#13;&#10;        android:id=&quot;@+id/analogClock&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginBottom=&quot;32dp&quot;/&gt;&#13;&#10;&#13;&#10;    &lt;!-- 登録ボタン --&gt;&#13;&#10;    &lt;Button&#13;&#10;        android:id=&quot;@+id/registerButton&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:text=&quot;Entry&quot;&#13;&#10;        android:textSize=&quot;20sp&quot;&#13;&#10;        android:padding=&quot;16dp&quot;&#13;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#13;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>